@page "/groups/delete"
@using Microsoft.EntityFrameworkCore
@using BlazorAcademy.Models
@inject IDbContextFactory<BlazorAcademy.Data.BlazorAcademyContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Group</h2>
    <hr />
    @if (group is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">group_name</dt>
            <dd class="col-sm-10">@group.group_name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">direction</dt>
            <dd class="col-sm-10">@group.direction</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">weekdays</dt>
            <dd class="col-sm-10">@group.weekdays</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">start_time</dt>
            <dd class="col-sm-10">@group.start_time</dd>
        </dl>
        <EditForm method="post" Model="group" OnValidSubmit="DeleteGroup" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(group is null)">Delete</button> |
            <a href="/groups">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Group? group;

    [SupplyParameterFromQuery]
    private byte group_id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        group = await context.Groups.FirstOrDefaultAsync(m => m.group_id == group_id);

        if (group is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteGroup()
    {
        using var context = DbFactory.CreateDbContext();
        context.Groups.Remove(group!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/groups");
    }
}
