@page "/students/delete"
@using Microsoft.EntityFrameworkCore
@using Academy.Models
@inject IDbContextFactory<Academy.Data.AppDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Student</h2>
    <hr />
    @if (student is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">LastName</dt>
            <dd class="col-sm-10">@student.LastName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">FirstName</dt>
            <dd class="col-sm-10">@student.FirstName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">MiddleName</dt>
            <dd class="col-sm-10">@student.MiddleName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">BirthDate</dt>
            <dd class="col-sm-10">@student.BirthDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@student.Email</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Phone</dt>
            <dd class="col-sm-10">@student.Phone</dd>
        </dl>
      @*   <dl class="row">
            <dt class="col-sm-2">Photo</dt>
            <dd class="col-sm-10">@student.Photo</dd>
        </dl> *@
        <dl class="row">
            <dt class="col-sm-2">GroupId</dt>
            <dd class="col-sm-10">@student.GroupId</dd>
        </dl>
        <EditForm method="post" Model="student" OnValidSubmit="DeleteStudent" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(student is null)">Delete</button> |
            <a href="/students">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Student? student;

    [SupplyParameterFromQuery]
    private int StudentId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        student = await context.Students.FirstOrDefaultAsync(m => m.StudentId == StudentId);

        if (student is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteStudent()
    {
        using var context = DbFactory.CreateDbContext();
        context.Students.Remove(student!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/students");
    }
}
