@page "/movies"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using Movies.Models
@using Movies.Data
@implements IAsyncDisposable
@inject IDbContextFactory<Movies.Data.MoviesContext> DbFactory

<PageTitle>Index</PageTitle>

<h1>Index</h1>

<div style="display:flex;justify-content:space-between">
	<form action="/movies" data-enhance data-permanent>
		<input type="search" name="titleFilter" />
		<input type="submit" value="Search" />
	</form>

	<div>
		<label for="movies-per-page">Movies per page:</label>
		<select id="movies-per-page" @bind="pagination.ItemsPerPage">
			<option value="3">3</option>
			<option value="5">5</option>
			<option value="8">8</option>
		</select>
	</div>
</div>

<p>
	<a href="movies/create">Create New</a>
</p>

<QuickGrid Class="table" Items="FilteredMovies" Pagination="pagination">
	<PropertyColumn Property="movie => movie.Title" />
	<PropertyColumn Property="movie => movie.ReleaseDate" />
	<PropertyColumn Property="movie => movie.Genre" />
	<PropertyColumn Property="movie => movie.Price" />

	<TemplateColumn Context="movie">
		<a href="@($"movies/edit?id={movie.Id}")">Edit</a> |
		<a href="@($"movies/details?id={movie.Id}")">Details</a> |
		<a href="@($"movies/delete?id={movie.Id}")">Delete</a>
	</TemplateColumn>
</QuickGrid>
<Paginator State="pagination" />

@code {
	private MoviesContext context = default!;
	[SupplyParameterFromQuery]
	private string? TitleFilter { get; set; }
	private IQueryable<Movie> FilteredMovies =>
		context.Movie.Where(m => m.Title!.Contains(TitleFilter ?? string.Empty));
	
	PaginationState pagination = new PaginationState { ItemsPerPage = 3 };

	protected override void OnInitialized()
	{
		context = DbFactory.CreateDbContext();
		// pagination.
	}

	public async ValueTask DisposeAsync() => await context.DisposeAsync();
}